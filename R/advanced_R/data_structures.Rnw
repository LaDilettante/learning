\documentclass{article}

\usepackage{verbatim}

\title{Advanced R - Data structure}
\date{\today}
\author{Anh Le}


\begin{document}
\maketitle


\section{Vector}

\verb`is.vector()` does not test if an object is a vector. Instead it returns \verb`TRUE` only if the object is a vector with no attributes apart from names.

<<>>=
real_vector <- c(1, 2, 3)
is.vector(real_vector)

attr(real_vector, "someattr") <- "attrvalue"
is.vector(real_vector)
is.atomic(real_vector)
@

\subsection{Atomic vector}

\verb`NA` is a logical vector of length one. \verb`NA` is coerced to the appropriate type to blend in with the rest of the vector.

<<>>=
typeof(NA)
v <- c(1, 2, NA, 3); typeof(v[3])
v <- c(1L, 2L, NA, 3L); typeof(v[3])
@

\section{List}

Lists are sometimes called \textbf{recursive} vectors, in contrast to regular \textbf{atomic} vectors.

<<>>=
x <- list(list(list()))
str(x)
is.recursive(x)
@

\verb`c()` combines several list into one. If we try to combine vector and list, the vector will be coerced to list.

<<>>=
x <- list(list(1, 2), c(3, 4))
y <- c(list(1, 2), c(3, 4))
str(x)
str(y)
@

\section{Exercises}

\begin{enumerate}
\item What are the six types of atomic vector? How does a list differ from an atomic vector?

Six types: logical, double, integer, character, and complex, raw. List is recursive, can hold multiple typles

\item What makes \verb`is.vector()` and \verb`is.numeric()` fundamentally different to \verb`is.list()` and \verb`is.character()`?

\item Test knowledge of vector coercion rule

<<>>=
c(1, FALSE) # Should be c(1, 0)
c("a", 1) # Should be c("a", "1")
c(list(1), "a") # Should be list(1, "a"), cuz "a" is coerced to list first
str(c(TRUE, 1L)) # Should be c(1L, 1L)
@

\item Why do you need to use \verb`unlist()` to convert a list to an atomic vector? Why doesn't \verb`as.vector()` work?

Probably because \verb`list` is already a (recursive, non-atomic) vector. Indeed,

<<>>=
l <- list(1, 2)
is.vector(l)
is.vector(l, mode="logical")
is.vector(l, mode="list")
is.vector(l, mode="expression")
@

\item Why is \verb`1 == "1"` true? (Because \verb`1 (double)` is coerced to \verb`"1 (character)"`). Why is \verb`-1 < FALSE` true? (Because \verb`FALSE (logical)` is coerced to \verb`0 (double)`). Why is \verb`"one" < 2` false? (Because \verb`2` is coerced to \verb`"2"`, and strings are compared alphabetically)

\item Why is the default missing value, \verb`NA`, a logical vector? What's special about logical vectors?

Probably because it's the most flexible, so whenever it's put together with other values in the vectors, \verb`NA` will be coerced, not the other values.

\end{enumerate}

\section{Attributes}

\section{Factors}

Factors are built on top of integer vectors using two attributes: the \verb`class()`, "factor", which makes them behave differently from regular integer vectors, and the \verb`levels()`, which defines the set of allowed values.

\section{Exercises}

\begin{enumerate}
\item An early draft used this code to illustrate \verb`structure()`:

<<>>=
structure(1:5, comment = "my attribute")
@

But when you print that object you don't see the comment attribute. Why?
<<>>=
x <- structure(1:5, comment="my attribute")
comment(x)
@

Turns out \verb`comment` is a special attribute that does not get printed. See \verb`help(comment)`.

\item What happens to a factor when you modify its levels?

<<>>=
f1 <- factor(letters)
levels(f1) <- rev(levels(f1))
f1
@

Both the observations and the level labels are switched to the new levels.

\item What does this code do? How do \verb`f2` and \verb`f3` differ from \verb`f1`

<<>>=
f2 <- rev(factor(letters))
f3 <- factor(letters, levels=rev(letters))
f2
f3
@

\verb`f2` only switches the order of the observations, the levels is the same as \verb`f1`. \verb`f3` has the same observations as \verb`f1`, but the levels is reversed.
\end{enumerate}

\section{Matrices and arrays}

\section{Exercises}

\begin{enumerate}
\item What does \verb`dim()` return when applied to a vector?

It returns \verb`NULL`

\item If \verb`is.matrix(x)` is \verb`TRUE`, what will `is.array(x)` return?

Must also be \verb`TRUE`.

\item How would you describe the following three objects? What makes them different to \verb`1:5`?

<<>>=
x1 <- array(1:5, c(1, 1, 5))
x2 <- array(1:5, c(1, 5, 1))
x3 <- array(1:5, c(5, 1, 1))
x1 # 5 1x1 matrices
x2 # 1 1x5 matrix
x3 # 1 5x1 matrix
@
\end{enumerate}

\section{Data frames}

Under the hood, a data frame is a list of equal-length vectors.

A data frame share properties with both the matrix and the list. For example, \verb`length()` of a data frame is the length of the underlying list, i.e equivalent to \verb`ncol()`. \verb`names()` is equivalent to \verb`colnames()`.

Same idea with subsetting -- we can subset a dataframe both in list-way (\verb`df$col`) and matrix-way (\verb`df[x, y]`).

Data frame is S3 class, thus its type reflects the underlying vector to build it, which is a list. Use \verb`class()` and \verb`is.data.frame()` to test.


<<>>=
df <- data.frame(x=c(1,2), y=c(3,4))
typeof(df)
class(df)
is.data.frame(df)
@

\section{Exercises}

\begin{enumerate}
\item What attributes does a data frame possess?

<<>>=
df <- data.frame(x = c(1,2))
attributes(df)
@

\item What does \verb`as.matrix()` do when applied to a data frame with columns of different types?

Probably coerced to the least flexible?

<<>>=
df <- data.frame(x = c(1,2), y=c("a", "b"))
as.matrix(df)
@


\item Can you have a data frame with 0 rows? What about 0 columns?

<<>>=
df_norows <- data.frame(x=numeric(0), y=numeric(0))
df_norows

# Cannot have no columns by itsef?
# data.frame() returns a df with 0 col and 0 row
@

\end{enumerate}



\end{document}